@model List<MediCareCMS.Models.LabTestRequest>
@{
    ViewData["Title"] = "Assigned Lab Tests";
}

@functions {
    public string GetNormalValueForTest(string testName)
    {
        return testName switch
        {
            "Blood Sugar" => "70-110",
            "Blood Pressure" => "80-120",
            "Hemoglobin" => "13-17",
            _ => "N/A"
        };
    }
}

<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet" />

<style>
    body {
        background: linear-gradient(to left, rgba(60, 158, 196, 0.6), rgba(42, 58, 89, 0.6));
        font-family: 'Poppins', sans-serif;
        margin: 0;
        padding: 0;
        min-height: 100vh;
        overflow: hidden;
    }

    .logo-top-right {
        position: absolute;
        top: 20px;
        right: 40px;
        width: 140px;
        height: auto;
    }

    .assigned-container {
        background: #ffffffdd;
        padding: 50px 40px;
        border-radius: 20px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        width: 95%;
        margin: 120px auto;
        overflow: hidden;
    }

    h2 {
        font-weight: 700;
        font-size: 2rem;
        color: #2f5274;
        text-align: center;
        margin-bottom: 30px;
    }

    .form-control {
        border-radius: 10px;
        padding: 10px 15px;
        font-size: 15px;
        border: 1px solid #ccc;
    }

        .form-control:focus {
            border-color: #3C9EC4;
            box-shadow: 0 0 5px rgba(60, 158, 196, 0.3);
            outline: none;
        }

    .btn-primary {
        border-radius: 10px;
        font-weight: 600;
        font-size: 14px;
        padding: 6px 16px;
        background-color: #3C9EC4;
        border: none;
        color: white;
    }

        .btn-primary:hover {
            background-color: #2a8bb0;
        }

    .table thead {
        background-color: #3C9EC4;
        color: white;
    }

    .table th, .table td {
        text-align: center;
        vertical-align: middle;
    }

    .modal-content {
        border-radius: 16px;
    }

    .modal-header {
        background: #f5f5f5;
        border-bottom: none;
    }

    .modal-footer {
        border-top: none;
    }
</style>

<img src="~/images/logo.png" class="logo-top-right" alt="Logo" />

<div class="assigned-container">
    <h2>Assigned Lab Tests</h2>

    <!-- Search by Doctor ID -->
    <form method="get" class="d-flex mb-4">
        <input name="doctorId" class="form-control me-3" placeholder="Search by Doctor ID..." value="@ViewBag.Filter" />
        <button class="btn btn-primary">Search</button>
    </form>

    <div class="table-responsive">
        <table class="table table-bordered table-hover align-middle">
            <thead>
                <tr>
                    <th>Request ID</th>
                    <th>Patient Name</th>
                    <th>Doctor ID</th>
                    <th>Doctor Name</th>
                    <th>Test Name</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.RequestId</td>
                        <td>@item.PatientName</td>
                        <td>@item.DoctorId</td>
                        <td>@item.DoctorName</td>
                        <td>@item.TestName</td>
                        <td>@item.Status</td>
                        <td>
                            <button class="btn btn-primary btn-sm"
                                    data-bs-toggle="modal"
                                    data-bs-target="#testModal"
                                    data-requestid="@item.RequestId"
                                    data-testname="@item.TestName"
                                    data-normalvalue="@GetNormalValueForTest(item.TestName)">
                                Test
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="testModal" tabindex="-1" aria-labelledby="testModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content p-2">
            <div class="modal-header">
                <h5 class="modal-title">Record Test Result for <span id="testNameTitle" class="fw-bold"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="RequestId" />
                <div class="mb-3">
                    <label>Normal Value Range</label>
                    <input type="text" class="form-control" id="NormalValue" readonly />
                </div>
                <div class="mb-3">
                    <label>Patient's Actual Value <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="ActualValue" />
                </div>
                <div class="mb-3">
                    <label>Remarks (optional)</label>
                    <textarea class="form-control" id="Remarks" rows="2"></textarea>
                </div>
                <div id="highlightMsg" class="fw-bold mt-2"></div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-success" onclick="submitResult()">Save Result</button>
                <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const modal = document.getElementById('testModal');
        modal.addEventListener('show.bs.modal', function (event) {
            const btn = event.relatedTarget;
            const requestId = btn.getAttribute('data-requestid');
            const testName = btn.getAttribute('data-testname');
            const normalVal = btn.getAttribute('data-normalvalue');

            modal.querySelector('#RequestId').value = requestId;
            modal.querySelector('#testNameTitle').innerText = testName;
            modal.querySelector('#NormalValue').value = normalVal || '';
            modal.querySelector('#ActualValue').value = '';
            modal.querySelector('#Remarks').value = '';
            modal.querySelector('#highlightMsg').innerText = '';
        });

        function submitResult() {
            const reqId = parseInt(document.getElementById('RequestId').value);
            const normal = document.getElementById('NormalValue').value;
            const actual = document.getElementById('ActualValue').value.trim();
            const remarks = document.getElementById('Remarks').value;
            const highlight = document.getElementById('highlightMsg');

            if (!actual || isNaN(actual)) {
                highlight.innerText = "Please enter a valid number for Actual Value.";
                highlight.style.color = "red";
                return;
            }

            const parts = normal.split('-');
            let isOutOfRange = false;

            if (parts.length === 2) {
                const low = parseFloat(parts[0]);
                const high = parseFloat(parts[1]);
                const actualVal = parseFloat(actual);

                if (actualVal < low) {
                    highlight.innerText = "Low Value!";
                    highlight.style.color = "red";
                    isOutOfRange = true;
                } else if (actualVal > high) {
                    highlight.innerText = "High Value!";
                    highlight.style.color = "red";
                    isOutOfRange = true;
                } else {
                    highlight.innerText = "Normal";
                    highlight.style.color = "green";
                }
            }

            fetch('/Lab/AjaxSaveResult', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    RequestId: reqId,
                    ResultValue: `${actual} (Normal: ${normal})`,
                    Remarks: remarks
                })
            })
            .then(res => res.json())
            .then(data => {
                if (data.ok) {
                    alert('Test Result Saved!');
                    location.reload();
                } else {
                    alert("Something went wrong while saving.");
                }
            })
            .catch(err => {
                console.error("Error saving result:", err);
                alert("Network or server error!");
            });
        }
    </script>
}
